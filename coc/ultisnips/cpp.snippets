# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet mainv "main with no argument" A
using namespace std;

int main() {
	$1
}
endsnippet

snippet maina "main with arguments" A
using namespace std;

int main(int argc, char* argv[]) {
	$1
}
endsnippet

snippet cfnormal "template for codeforce programming" A
#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <generic>

#define f(i, b, e) for(auto i=b, i != e; ++i)

using namespace std;

int main(){
	$1
}
endsnippet

snippet cftest "template for codeforce programming" A
#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <generic>

#define f(i, b, e) for(auto i=b, i != e; ++i)

using namespace std;

int main(){
	
	int test;
	cin >> test;

	while(test--) {
		$1
	}
}
endsnippet

snippet cendl "cout with endl" A
cout << $1 << endl;
$2
endsnippet
